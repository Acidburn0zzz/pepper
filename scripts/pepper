#!/usr/bin/env python
'''
A CLI interface that mimics the interface of Salt's ``salt`` CLI interface

'''
import json
import optparse
import os

from textwrap import dedent

import pepper
import pepper.cli
import pepper.version

from pepper.cli import logger

# Auth values placeholder; grab interactively at CLI or from config file
SALTURL = os.environ.get('SALTAPI_URL', 'http://localhost:8000/')
SALTUSER = os.environ.get('SALTAPI_USER', 'saltdev')
SALTPASS = os.environ.get('SALTAPI_PASS', 'saltdev')
SALTEAUTH = os.environ.get('SALTAPI_EAUTH', 'pam')

def add_globalopts(parser):
    '''
    Misc global options
    '''
    optgroup = optparse.OptionGroup(parser, "Pepper ``salt`` Options",
            "Mimic the ``salt`` CLI")

    # optgroup.add_option('-t', '--timeout', action='store_true',
    #     help="Specify wait time before returning control to the shell")

    # optgroup.add_option('--out', '--output', dest='output',
    #         help="Specify the output format for the command output")

    # optgroup.add_option('--return', default='', metavar='RETURNER',
    #     help="Redirect the output from a command to a persistent data store")

    parser.add_option_group(optgroup)

def add_tgtopts(parser):
    '''
    Targeting
    '''
    optgroup = optparse.OptionGroup(parser, "Targeting Options",
            "Target which minions to run commands on")

    # optgroup.add_option('-E', '--pcre', default=False, action='store_true',
    #     help="Target hostnames using PCRE regular expressions")

    # optgroup.add_option('-L', '--list', default=False, action='store_true',
    #     help="Specify a comma delimited list of hostnames")

    # optgroup.add_option('-G', '--grain', default=False, action='store_true',
    #     help="Target based on system properties")

    # optgroup.add_option('--grain-pcre', default=False, action='store_true',
    #     help="Target based on PCRE matches on system properties")

    parser.add_option_group(optgroup)

def add_authopts(parser):
    '''
    Authentication options
    '''
    optgroup = optparse.OptionGroup(parser, "Authentication Options",
            dedent("""\
            Authentication credentials can optionally be supplied via the
            environment variables:
            SALTAPI_URL, SALTAPI_USER, SALTAPI_PASS, SALTAPI_EAUTH.
            """))

    # optgroup.add_option('-a', '--auth', '--eauth', '--extended-auth',
    #     default='', dest='eauth', help=dedent("""\
    #             Specify the external_auth backend to authenticate against and
    #             interactively prompt for credentials"""))

    # optgroup.add_option('-T', '--make-token', default=False,
    #     dest='mktoken', action='store_true',
    #     help=dedent("""\
    #         Generate and save an authentication token for re-use. The token is
    #         generated and made available for the period defined in the Salt
    #         Master."""))

    parser.add_option_group(optgroup)

def main():
    '''
    '''
    parser = optparse.OptionParser(
            description=pepper.__doc__,
            usage="%prog [opts] <tgt> <mod.fun> [arg] [arg=val]",
            version=pepper.version.__version__)

    add_globalopts(parser)
    add_tgtopts(parser)
    add_authopts(parser)

    opts, args = parser.parse_args()

    if len(args) < 2:
        parser.error("Command not recognized.")

    tgt, fun = args.pop(0), args.pop(0)

    lowstate = [{
        'client': 'local',
        'tgt': tgt,
        'fun': fun,
        'arg': args,
    }]

    logger.debug('Executing lowstate: {0}'.format(lowstate))

    api = pepper.Pepper(SALTURL)
    auth = api.login(SALTUSER, SALTPASS, SALTEAUTH)
    ret = api.run(lowstate)

    # TODO: temporary pretty-printing until Salt outputters are in place
    return json.dumps(ret, sort_keys=True, indent=4)

if __name__ == '__main__':
    try:
        raise SystemExit(main())
    except KeyboardInterrupt:
        # TODO: mimic CLI and output JID on ctrl-c
        raise SystemExit(0)
